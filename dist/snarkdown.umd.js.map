{"version":3,"sources":["../src/index.js"],"names":["root","factory","define","amd","exports","module","snarkdown","this","tag","context","token","norm","replace","end","length","desc","tags","outdent","str","ch","match","RegExp","trim","parse","md","chunk","prev","inner","t","i","tokenizer","out","last","lastIndex","exec","substring","index","escaped","test","String","toLowerCase","charAt","link","_","__","\n\n",">","*","#"],"mappings":"8IAAC,SAASA,EAAMC,GACK,kBAATC,SAAuBA,OAAOC,IACxCD,UAAWD,GAEc,gBAAVG,SACfC,OAAOD,QAAUH,IAGjBD,EAAKM,UAAYL,KAEjBM,OAAM,WAWP,QAASC,GAAIC,EAASC,GACrB,GAAIC,GAAOD,EAAME,QAAQ,MAAM,KAAKA,QAAQ,qBAAqB,QAChEC,EAAMJ,EAAQA,EAAQK,OAAO,KAAKJ,EAClCK,EAAOC,EAAKL,EACb,OAAKI,GACDA,EAAK,MAAK,EAAcA,EAAK,IACjCN,EAAQI,EAAI,MAAM,QAAQH,GACnBK,EAAMF,EAAM,EAAI,IAHLH,EAMnB,QAASO,GAAQC,EAAKC,GAErB,MADAA,IAAMA,GAAM,KAAOD,EAAIE,MAAM,gBAAkB,YAAY,GACpDF,EAAIN,QAAQ,GAAIS,QAAO,IAAIF,EAAG,MAAM,IAG5C,QAASG,GAAKJ,GACb,MAAOA,GAAIN,QAAQ,eAAe,IAGnC,QAASW,GAAMC,GACd,GAICC,GAAOC,EAAMhB,EAAiBiB,EAAOC,EAAGC,EAJrCC,EAAY,6QACfrB,KACAsB,EAAM,GACNC,EAAO,CAKR,KAHAR,EAAKF,EAAKE,GAEVM,EAAUG,UAAY,EACbvB,EAAMoB,EAAUI,KAAKV,IAC7BE,EAAOF,EAAGW,UAAUH,EAAMtB,EAAM0B,OAChCJ,EAAOF,EAAUG,UACjBR,EAAQf,EAAM,GACd2B,EAAQJ,UAAY,EAChBI,EAAQC,KAAKZ,KAIRhB,EAAM,GACde,EAAQ,sBAAsBc,OAAO7B,EAAM,IAAI8B,cAAc,KAAK9B,EAAM,GAAG,WAGnEA,EAAM,GACde,EAAQ,8BAA8BH,EAAKL,EAAQP,EAAM,KAAK,WAGtDA,EAAM,IACdkB,EAAIlB,EAAM,GACiB,MAAvBkB,EAAEa,OAAOb,EAAEd,OAAO,KACrBc,EAAI,IACJlB,EAAM,GAAKA,EAAM,GAAGE,QAAQ,SAAU,KAEvCe,EAAQJ,EAAMN,EAAQP,EAAM,GAAI,YACxB,MAAJkB,IACHA,EAAQ,MAAJA,EAAU,IAAM,IACpBD,EAAQA,EAAMf,QAAQ,WAAY,kBAEnCa,EAAQ,KAAKT,EAAKY,GAAG,GAAG,KAAOD,EAAQ,KAAKX,EAAKY,GAAG,GAAG,MAG/ClB,EAAM,GACde,EAAQf,EAAM,GAAGgC,KAAKhC,EAAM,GAAGE,QAAQ,iBAAiB,KAGhDF,EAAM,IAAMA,EAAM,KAC1BkB,EAAI,KAAOlB,EAAM,IAAMA,EAAM,IAAII,OAAwB,MAAdJ,EAAM,GAAG,GAAS,EAAE,GAC/De,EAAQ,QAAQG,EAAE,IAAML,EAAMb,EAAM,IAAMA,EAAM,KAAO,KAAKkB,EAAE,OAGtDlB,EAAM,IACde,EAAQ,SAASf,EAAM,IAAI,UAGnBA,EAAM,MACde,EAAQjB,EAAIC,EAASC,EAAM,OAE5BqB,GAAOL,EACPK,GAAON,CAIR,KADAM,GAAOP,EAAGW,UAAUH,GACfH,EAAEpB,EAAQK,OAAQe,KACtBE,GAAOvB,EAAIC,EAASA,EAAQoB,GAG7B,OAAOP,GAAKS,GA9Fb,GAAIf,IACF2B,GAAK,OAAO,SACZC,IAAM,WAAW,aACjBC,QAAU,cAAc,GACxBC,KAAO,eAAe,iBACtBC,KAAO,OAAO,SACdC,KAAO,OAAO,UAEfX,EAAU,kBA0FX,OADAd,GAAMA,MAAQA,EACPA","file":"snarkdown.umd.js","sourcesContent":["(function(root, factory) {\n\tif (typeof define==='function' && define.amd) {\n\t\tdefine([], factory);\n\t}\n\telse if (typeof exports==='object') {\n\t\tmodule.exports = factory();\n\t}\n\telse {\n\t\troot.snarkdown = factory();\n\t}\n}(this, function() {\n\tvar tags = {\n\t\t\t_ : ['<em>','</em>'],\n\t\t\t__ : ['<strong>','</strong>'],\n\t\t\t'\\n\\n' : ['<br />\\n\\n', false],\n\t\t\t'>' : ['<blockquote>','</blockquote>'],\n\t\t\t'*' : ['<ul>','</ul>'],\n\t\t\t'#' : ['<ol>','</ol>']\n\t\t},\n\t\tescaped = /[^\\\\](\\\\\\\\)*\\\\$/g;\n\n\tfunction tag(context, token) {\n\t\tvar norm = token.replace(/\\*/g,'_').replace(/^(  \\n\\n*|\\n{2,})/g,'\\n\\n'),\n\t\t\tend = context[context.length-1]===token,\n\t\t\tdesc = tags[norm];\n\t\tif (!desc) return token;\n\t\tif (desc[1]===false) return desc[0];\n\t\tcontext[end?'pop':'push'](token);\n\t\treturn desc[ end ? 1 : 0 ];\n\t}\n\n\tfunction outdent(str, ch) {\n\t\tch = (ch || '') + (str.match(/^(\\t|  )+/m) || ['[\\\\t ]*'])[0];\n\t\treturn str.replace(new RegExp('^'+ch,'gm'),'');\n\t}\n\n\tfunction trim(str) {\n\t\treturn str.replace(/(^\\n+|\\n+$)/g,'');\n\t}\n\n\tfunction parse(md) {\n\t\tvar tokenizer = /(?:^```(\\w*)\\n([\\s\\S]*?)\\n```$)|((?:(?:^|\\n+)(?:\\t|  {2,}).+)+\\n*)|((?:(?:^|\\n)([>*+-]|\\d+\\.)\\s+.*)+)|(?:\\[([^\\]]+?)\\]\\(([^\\)]+?)\\)|(?:(?:^|\\n+)([^\\s].*)\\n(\\-{3,}|={3,})(?:\\n+|$))|(?:(?:^|\\n+)(#{1,3})\\s*(.+)(?:\\n+|$))|(?:`([^`].*?)`)|(  \\n\\n*|\\n{2,}|__|\\*\\*|[_*]))/gm,\n\t\t\tcontext = [],\n\t\t\tout = '',\n\t\t\tlast = 0,\n\t\t\tchunk, prev, token, esc, reg, inner, t, i;\n\t\tmd = trim(md);\n\n\t\ttokenizer.lastIndex = 0;\n\t\twhile ( (token=tokenizer.exec(md)) ) {\n\t\t\tprev = md.substring(last, token.index);\n\t\t\tlast = tokenizer.lastIndex;\n\t\t\tchunk = token[0];\n\t\t\tescaped.lastIndex = 0;\n\t\t\tif (escaped.test(prev)) {\n\t\t\t\t// escaped\n\t\t\t}\n\t\t\t// Code blocks:\n\t\t\telse if (token[2]) {\n\t\t\t\tchunk = '\\n<pre class=\"code '+String(token[1]).toLowerCase()+'\">'+token[2]+'</pre>\\n';\n\t\t\t}\n\t\t\t// Indent blocks:\n\t\t\telse if (token[3]) {\n\t\t\t\tchunk = '\\n<pre class=\"code poetry\">'+trim(outdent(token[3]))+'</pre>\\n';\n\t\t\t}\n\t\t\t// > Quotes, -* lists:\n\t\t\telse if (token[5]) {\n\t\t\t\tt = token[5];\n\t\t\t\tif (t.charAt(t.length-1)==='.') {\n\t\t\t\t\tt = '.';\n\t\t\t\t\ttoken[4] = token[4].replace(/^\\d+/gm, '');\n\t\t\t\t}\n\t\t\t\tinner = parse(outdent(token[4], '[>*+-.]'));\n\t\t\t\tif (t!=='>') {\n\t\t\t\t\tt = t==='.' ? '#' : '*';\n\t\t\t\t\tinner = inner.replace(/^(.*)$/gm, '\\t<li>$1</li>');\n\t\t\t\t}\n\t\t\t\tchunk = '\\n'+tags[t][0]+'\\n' + inner + '\\n'+tags[t][1]+'\\n';\n\t\t\t}\n\t\t\t// Links:\n\t\t\telse if (token[6]) {\n\t\t\t\tchunk = token[6].link(token[7].replace(/^javascript\\:/g,''));\n\t\t\t}\n\t\t\t// Titles:\n\t\t\telse if (token[8] || token[10]) {\n\t\t\t\tt = 'h' + (token[10] ? token[10].length : (token[9][0]==='='?1:2));\n\t\t\t\tchunk = '\\n\\n<'+t+'>' + parse(token[8] || token[11]) + '</'+t+'>\\n';\n\t\t\t}\n\t\t\t// `code`:\n\t\t\telse if (token[12]) {\n\t\t\t\tchunk = '<code>'+token[12]+'</code>';\n\t\t\t}\n\t\t\t// Inline formatting: *em*, **strong** & friends\n\t\t\telse if (token[13]) {\n\t\t\t\tchunk = tag(context, token[13]);\n\t\t\t}\n\t\t\tout += prev;\n\t\t\tout += chunk;\n\t\t}\n\n\t\tout += md.substring(last);\n\t\tfor (i=context.length; i--; ) {\n\t\t\tout += tag(context, context[i]);\n\t\t}\n\n\t\treturn trim(out);\n\t}\n\n\tparse.parse = parse;\n\treturn parse;\n}));\n"]}